 import puppeteer from 'puppeteer'; import { gptAPI } from '../engine/api.js'; const getLinks = async (page, linkSelector) => { const links = await page.$$eval(linkSelector, (links) => { const excludePattern = /yarn|package|config|\bpublic\b|\bassets\b|\bstyles\b|\btypes\b|.css|svg|.gitignore|.prettierrc/; return links .filter( (link) => link.href !== link.baseURI && link.title !== 'Go to parent directory' && !excludePattern.test(link.href) ) .map((link) => link.href); }); return links; }; const getFileCode = async (page, codeSelector) => { const fileCode = await page.$eval(codeSelector, (el) => { return el.innerText; }); return fileCode; }; const getAllFileCode = async (page, links, codeSelector, linkSelector) => { const allFileCode = []; for (const link of links) { await page.goto(link); const isSelectorFound = await isSelectorPresent(page, codeSelector); if (isSelectorFound) { const fileCode = await getFileCode(page, codeSelector); allFileCode.push(fileCode); } else { const folderLinks = await getLinks(page, linkSelector); console.log('folderLinks: ', folderLinks); const nestedFileCode = await getAllFileCode( page, folderLinks, codeSelector, linkSelector ); allFileCode.push(nestedFileCode); console.log('nestedFileCode', nestedFileCode); } } const compressedCode = allFileCode .flat() .join('\n---') .replace(/\s+/g, ' '); return compressedCode; }; const isSelectorPresent = async (page, codeSelector, timeout = 500) => { try { await page.waitForSelector(codeSelector, { timeout }); console.log(`Selector '${codeSelector}' is present on the page.`); return true; } catch (error) { console.log('isSelectorPresent error: ', error); console.log( `Selector '${codeSelector}' is not present on the page: ${await page.url()}.` ); return false; } }; const scrapeCode = async () => { try { const repoUrl = 'https://github.com/feldeh/readme-generator'; // const repoUrl = 'https://github.com/John4E656F/earthbnb'; const linkSelector = 'a.js-navigation-open'; const codeSelector = 'table'; const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto(repoUrl); const links = await getLinks(page, linkSelector); console.log('Links', links); const allFileCode = await getAllFileCode( page, links, codeSelector, linkSelector ); console.log('allFileCode', allFileCode); await browser.close(); return allFileCode; } catch (error) { throw error; } }; export async function analyseSourceCode(req, res) { try { // const allFileCode = await scrapeCode(); const response = await scrapeCode(); // const response = await gptAPI(allFileCode); res.send(response); } catch (error) { console.error( `An error occurred while analyzing the source code: ${error.message}` ); console.error('Error stack trace:', error.stack); res.status(500).send({ error: 'An error occurred while analyzing the source code.', }); } } --- import * as dotenv from 'dotenv'; import { Configuration, OpenAIApi } from 'openai'; dotenv.config(); export const gptAPI = async (scrapedCode) => { const configuration = new Configuration({ apiKey: process.env.API_KEY, }); const openai = new OpenAIApi(configuration); const systemPrompt = 'Act as a cyber security expert. You will generate a vulnerability assessment based on the source code provided by the user. Only list the three most important vulnerabilities and suggest ways to fix them.'; const userPrompt = `This is the source code: ${scrapedCode} `; const response = await openai.createChatCompletion({ model: 'gpt-3.5-turbo', messages: [ { role: 'system', content: systemPrompt }, { role: 'user', content: userPrompt }, ], }); return response.data.choices[0].message.content; }; --- import express from 'express'; import { analyseSourceCode } from '../controllers/vulnerabilityController.js'; const router = express.Router(); router.get('/vulnerability', analyseSourceCode); export default router; --- import express from 'express'; import router from './routes/vulnerabilityRoutes.js'; const app = express(); app.use('/api', router); const port = 3000; app.listen(port, () => { console.log(`Server running at http://localhost:${port}/`); });